convergencePlot()
source("/home/andre/server-home/paper/evolutionary_hypergraphpartitioning/R/plot_functions.R")
source("/home/andre/server-home/paper/evolutionary_hypergraphpartitioning/R/final_preprocessing.R")
data = automaticPlot(list("ef" = ef,
"vc" = vc,
"vc_ef" = vc_ef
),
computeSequentialBaselineTime(ef))
library(ggplot2)
library(scales)
library(sqldf)
library(data.table)
library(plyr)
library(dplyr)
library(dtplyr)
library(grid)
library(EnvStats)
source("/home/andre/server-home/paper/evolutionary_hypergraphpartitioning/R/plot_functions.R")
source('~/server-home/paper/evolutionary_hypergraphpartitioning/R/plot_functions.R')
library(ggplot2)
library(scales)
library(sqldf)
library(data.table)
library(plyr)
library(dplyr)
library(dtplyr)
library(grid)
library(EnvStats)
computeSequentialBaselineTime = function(data) {
# average over seeds and iterations
first_iterations = data[data$iteration == 1,]
first_iterations =  ddply(first_iterations, c("name","k"), function(df) data.frame(avg_duration = mean(df$time)))
data_dt <- data.table(first_iterations, key=c("name", "k"))
setkeyv(data_dt, c("name","k"))
return(data_dt)
}
computeTable = function(data, algorithm) {
result_best <- rep(NA, length(data))
result_time <- rep(NA, length(data))
count <- 1
printTable <- data.frame(aggregate(data$connectivity, by=list(data$name,data$k), max))
printTable <- plyr::rename(printTable, c("Group.1"="name", "Group.2"="k", "x"="connectivity"))
if (count(printTable[printTable$connectivity == 0,]) > 0) {
printTable[printTable$connectivity == 0,]$connectivity = 1
}
if (count(data[data$connectivity == 0,]) > 0) {
data[data$connectivity == 0,]$connectivity = 1
}
result_best[count] <- geoMean(data[data$iteration == 1,]$connectivity)
result_time[count] <- mean(data[data$iteration == 1,]$norm_time)
data[data$iteration > 1,]$norm_time = data[data$iteration > 1,]$norm_time + mean(data[data$iteration == 1,]$norm_time)
data = data[data$iteration > 1,]
count <- count + 1
data = data[with(data, order(norm_time)), ]
for(i in 1:nrow(data)) {
cur_row <- which(printTable$name==data[i, "name"] & printTable$k==data[i,"k"])
#Ensure that no 0 connectivity values are added to the geoMean calculation
if(length(cur_row) == 0) {
old_con <- 41
new_con <- 42
print("Tried to Update Matrix with 0 as connectivity")
} else {
old_con <- printTable[cur_row, "connectivity"]
new_con <- data[i, "connectivity"]
}
stopifnot(new_con > 0)
if(old_con > new_con) {
printTable[cur_row, "connectivity"] <- new_con
result_best[count] <- geoMean(printTable$connectivity)
result_time[count] <- data[i, "norm_time"]
count <- count + 1
}
}
if(length(which(is.na(result_best))) > 0) {
limit = min(which(is.na(result_best)))
}
else {
limit <- length(result_best)
}
returnFrame <- data.frame(best=result_best[1:limit],t=result_time[1:limit])
returnFrame$algorithm = algorithm
return(returnFrame)
}
average_over_seeds = function(data) {
connectivity_vector <- rep(NA,length(data))
time_vector <- rep(NA,length(data))
graph_vector <- rep("",length(data))
k_vector <- rep(NA, length(data))
iteration_vector <- rep(NA, length(data))
count=1
for(graph_name in unique(data$name)) {
graph_data <- data[data$name == graph_name,]
for(k in unique(graph_data$k)) {
graph_k_data <- graph_data[graph_data$k == k,]
best_connectivity_per_seed <- rep(NA, max(unique(graph_k_data$seed)))
running_time_per_seed <- rep(NA, max(unique(graph_k_data$seed)))
#fill seed list with first entries
for(seed in 1:length(best_connectivity_per_seed)){
graph_k_seed_data <-graph_k_data[graph_k_data$seed == seed,]
graph_k_seed_data <- graph_k_seed_data[with(graph_k_seed_data, order(iteration)), ]
if(nrow(graph_k_seed_data) > 0 ){
best_connectivity_per_seed[graph_k_seed_data[[1, "seed"]]] <- graph_k_seed_data[[1, "connectivity"]]
running_time_per_seed[graph_k_seed_data[[1, "seed"]]] <- graph_k_seed_data[[1, "time"]]
}
else {
# print("Error - Missing data for:")
# print(graph_name)
# print(k)
# print(seed)
# print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
}
}
#The first calculation has to be added to the output
connectivity_vector[count] <- mean(best_connectivity_per_seed, na.rm=TRUE)
time_vector[count] <-  mean(running_time_per_seed, na.rm=TRUE)
graph_vector[count] <- graph_name
k_vector[count] <- k
iteration_vector[count] <- 1
count <- count + 1
graph_k_data = graph_k_data[with(graph_k_data, order(time)), ]
for(i in 1:(nrow(graph_k_data))) {
seed = graph_k_data[[i,"seed"]]
if(graph_k_data[[i,"connectivity"]] < best_connectivity_per_seed[seed]) {
best_connectivity_per_seed[seed] <- graph_k_data[[i,"connectivity"]]
connectivity_vector[count] <- mean(best_connectivity_per_seed, na.rm=TRUE)
time_vector[count] <- graph_k_data[[i, "time"]]
graph_vector[count] <- graph_name
iteration_vector[count] <- graph_k_data[[i,"iteration"]]
k_vector[count] <- k
count <- count + 1
}
}
}
}
if(length(which(is.na(connectivity_vector))) > 0) {
limit = min(which(is.na(connectivity_vector)))
} else {
limit <- length(connectivity_vector)
}
returnFrame <- data.frame(connectivity=connectivity_vector[1:limit],
time=time_vector[1:limit],
name=graph_vector[1:limit],
k=k_vector[1:limit],
iteration=iteration_vector[1:limit])
return(returnFrame)
}
baselineTime =  function(dat) {
data <- average_over_seeds(dat)
data = data[with(data, order(name,k)), ]
first_iterations = data[data$iteration == 1,]
data_dt <- data.table(first_iterations, key=c("name", "k"))
setkeyv(data_dt, c("name", "k"))
return(data_dt)
}
createNormalizedTimeDF = function(dat, baseline_dt) {
data <- average_over_seeds(dat)
data = data[with(data, order(name,k)), ]
# first_iterations = data[data$iteration == 1,]
# data_dt <- data.table(first_iterations, key=c("name", "k"))
# setkeyv(data_dt, c("name", "k"))
# normalize elapsed time with baseline time
data$norm_time = data$time / baseline_dt[.(data$name,data$k)]$avg_duration
# warning(paste("timestamps <1:", count(data[data$norm_time < 1,])))
#data = data[data$norm_time >= 1,]
#print(data[data$norm_time < 1,])
#data[data$norm_time <= 1,]$norm_time = 1
#sort by normalized time
S_data = data[with(data, order(norm_time)), ]
return(S_data)
}
graphclass = function(row) {
if(grepl("*primal.hgr", row['name'])){
return("SAT14primal")
} else if(grepl("*dual.hgr", row['name'])){
return("SAT14dual")
}  else if(grepl("*cnf.hgr", row['name'])){
return("SAT14literal")
} else if (grepl("*dac2012*", row['name'])) {
return("DAC2012")
} else if (grepl("*ISPD98*", row['name'])) {
return("ISPD98")
} else {
return("SPM")
}
}
convergencePlot = function(data, legendPos = c(0.1,0.1), title="",legendcol = 2,  colors=c("" = "#4daf4a", "conn" = "#000000", "cut" = "#222222"),
fntsize_axis = 8, fntsize_leg = 8, keysize = .5) {
return(ggplot(data, aes(x=t, y=best, color=algorithm)) +
geom_line() +
scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
scale_y_continuous(breaks = pretty_breaks(n=5)) +
scale_colour_manual("", values = colors) +
theme_bw() +
theme(aspect.ratio = 2/(1+sqrt(5)),
legend.position = legendPos,
legend.background = element_blank(),
legend.title = element_text(size=fntsize_leg),
legend.text=element_text(size=fntsize_leg),
legend.box = NULL,
panel.grid.major = element_line(linetype="dotted",size = 0.5, color = "grey"),
panel.grid.minor = element_line(),
panel.border = element_rect(colour = "black"),
axis.text=element_text(size = fntsize_axis),
axis.text.x=element_text(angle = 50,hjust = 1),
axis.line = element_line(size = 0.2, color = "black"),
axis.title.y = element_text(vjust=1.5, size = fntsize_axis),
axis.title.x = element_text(vjust=1, size = fntsize_axis),
plot.title = element_text(size=8, hjust = 0.5, vjust=-2)) +
xlab(expression(paste("normalized time ",~italic('t'[n])))) +
#ylab(paste("mean min $(\\lambda - 1)$")) +
ylab(expression(paste("mean min ", ~italic(lambda - 1)))) +
ggtitle(title) + guides(colour = guide_legend(title="Algorithm", override.aes = list(size=2), ncol = legendcol, byrow = F, keywidth = keysize, keyheight = keysize, legend.margin =-.5)))
}
automaticPlot = function(dataframelist, baseline_dt) {
plottable <- data.frame()
for(i in 1:length(dataframelist)) {
plottable <- rbind(plottable, computeTable(createNormalizedTimeDF(dataframelist[[i]],baseline_dt),names(dataframelist[i])))
}
return(plottable)
}
data = automaticPlot(list("ef" = ef,
"vc" = vc,
"vc_ef" = vc_ef
),
computeSequentialBaselineTime(ef))
ggplot(data, aes(x=t, y=best, color=algorithm)) +
geom_line() +
scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
scale_y_continuous(breaks = pretty_breaks(n=5))
View(random_combine)
kahypar_ca_vcycle <- read.csv("/home/andre/server-home/Hypergraphs/unicluster_1weektoabstract/clean/vcycle_clean.txt",
header=TRUE, sep=" ")
kahypar_ca <- read.csv("/home/andre/server-home/Hypergraphs/unicluster_1weektoabstract/clean/nonevolutionary_clean.txt",
header=TRUE, sep=" ")
View(kahypar_ca_vcycle)
View(kahypar_ca)
ef <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/vc_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc_ef <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/vc_and_ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
f <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/vc_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc_ef <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/vc_and_ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
ef <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/vc_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc_ef <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/vc_and_ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
patoh <-read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/patoh_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
hmetis_k<- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/hmetis_k_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
hmetis_rb<- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/hmetis_rb_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
View(patoh)
patoh <-read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/patoh_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
patoh$trueSeed <- patoh$seed %% 5
patoh$trueSeed[patoh$trueSeed == 0] <- 5
hmetis_k$trueSeed <- hmetis_k$seed %% 5
hmetis_k$trueSeed[hmetis_k$trueSeed == 0] <- 5
hmetis_rb$trueSeed <- hmetis_rb$seed %% 5
hmetis_rb$trueSeed[hmetis_rb$trueSeed == 0] <- 5
nrow(unique(hmetis_rb[c("name", "k", "trueSeed")]))
nrow(unique(hmetis_k[c("name", "k", "trueSeed")]))
nrow(unique(patoh[c("name", "k", "trueSeed")]))
nrow(unique(patoh[c("name", "k", "trueSeed")]))
patoh <-read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/patoh_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
patoh$trueSeed <- patoh$seed %% 5
patoh$trueSeed[patoh$trueSeed == 0] <- 5
nrow(unique(patoh[c("name", "k", "trueSeed")]))
hmetis_k_instances = unique(hmetis_k[c("name", "k", "trueSeed")])
hmetis_rb_instances = unique(hmetis_rb[c("name", "k", "trueSeed")])
patoh_instances = unique(patoh[c("name", "k", "trueSeed")])
temp <- merge(hmetis_k_instances, hmetis_rb_instances)
nrow(temp)
temp <- merge(hmetis_k_instances, patoh_instances)
nrow(temp)
temp <- anti_join(hmetis_k_instances, patoh_instances)
View(temp)
patoh <-read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/patoh_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
hmetis_k<- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/hmetis_k_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
hmetis_rb<- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/hmetis_rb_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
patoh$trueSeed <- patoh$seed %% 5
patoh$trueSeed[patoh$trueSeed == 0] <- 5
hmetis_k$trueSeed <- hmetis_k$seed %% 5
hmetis_k$trueSeed[hmetis_k$trueSeed == 0] <- 5
hmetis_rb$trueSeed <- hmetis_rb$seed %% 5
hmetis_rb$trueSeed[hmetis_rb$trueSeed == 0] <- 5
nrow(unique(hmetis_rb[c("name", "k", "trueSeed")]))
nrow(unique(hmetis_k[c("name", "k", "trueSeed")]))
nrow(unique(patoh[c("name", "k", "trueSeed")]))
temp <- merge(hmetis_k_instances, patoh_instances)
nrow(temp)
temp <- unique(patoh[c("name", "k", "trueSeed")])
temp <- anti_join(hmetis_k_instances, patoh_instances)
View(temp)
hmetis_k<- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/hmetis_k_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
hmetis_k<- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/hmetis_k_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
temp <- merge(hmetis_k_instances, patoh_instances)
nrow(temp)
temp <- anti_join(hmetis_k_instances, patoh_instances)
temp <- unique(patoh[c("name", "k", "trueSeed")])
View(temp)
hmetis_k<- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/hmetis_k_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
hmetis_k$trueSeed <- hmetis_k$seed %% 5
hmetis_k$trueSeed[hmetis_k$trueSeed == 0] <- 5
hmetis_k_instances = unique(hmetis_k[c("name", "k", "trueSeed")])
hmetis_rb_instances = unique(hmetis_rb[c("name", "k", "trueSeed")])
patoh_instances = unique(patoh[c("name", "k", "trueSeed")])
temp <- merge(hmetis_k_instances, patoh_instances)
nrow(temp)
vcycles_fixed_bug_clean <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/vcycles_fixed_bug_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
nrow(unique(vcycles[c("name", "k", "seed")]))
vcycles<- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/vcycles_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
nrow(unique(vcycles[c("name", "k", "seed")]))
vcycles_instances = unique(vcycles[c("name", "k", "seed")])
vcycles_instances <- plyr::rename(vcycles_instances, c("seed" = "trueSeed"))
temp <- merge(hmetis_k_instances, vcycles_instances)
nrow(temp)
edge<- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/edge_frequency_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
nrow(unique(edge[c("name", "k", "seed")]))
edge_instances = unique(edge[c("name", "k", "seed")])
edge_instances <- plyr::rename(edge_instances, c("seed" = "trueSeed"))
temp <- merge(hmetis_k_instances, edge_instances)
nrow(temp)
temp <- merge(edge_instances, vcycles_instances)
nrow(temp)
temp <- anti_join(hmetis_k_instances, vcycles_instances)
View(temp)
View(vcycles)
edge<- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/edge_frequency_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vcycles<- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/vcycles_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vcycles<- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/vcycles_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
edge_instances = unique(edge[c("name", "k", "seed")])
vcycles_instances = unique(vcycles[c("name", "k", "seed")])
vcycles_instances <- plyr::rename(vcycles_instances, c("seed" = "trueSeed"))
temp <- anti_join(hmetis_k_instances, vcycles_instances)
View(temp)
edge<- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/ef_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vcycles<- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/vc_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
nrow(unique(edge[c("name", "k", "seed")]))
nrow(unique(vcycles[c("name", "k", "seed")]))
edge_instances = unique(edge[c("name", "k", "seed")])
vcycles_instances = unique(vcycles[c("name", "k", "seed")])
edge_instances <- plyr::rename(edge_instances, c("seed" = "trueSeed"))
vcycles_instances <- plyr::rename(vcycles_instances, c("seed" = "trueSeed"))
temp <- anti_join(hmetis_k_instances, vcycles_instances)
View(temp)
print("HMETIS")
print("HMETIS" + 2
)
print("HMETIS",
2)
edge<- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/ef_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vcycles<- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/vc_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
patoh <-read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/patoh_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
hmetis_k<- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/hmetis_k_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
hmetis_rb<- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/clean_results/hmetis_rb_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
patoh$trueSeed <- patoh$seed %% 5
patoh$trueSeed[patoh$trueSeed == 0] <- 5
hmetis_k$trueSeed <- hmetis_k$seed %% 5
hmetis_k$trueSeed[hmetis_k$trueSeed == 0] <- 5
hmetis_rb$trueSeed <- hmetis_rb$seed %% 5
hmetis_rb$trueSeed[hmetis_rb$trueSeed == 0] <- 5
#temp <- unique(hmetis_rb[c("name", "k", "trueSeed")])
#temp2 <- unique(hmetis_k[c("name", "k", "trueSeed")])
#temp3 <- merge(temp, temp2)
nrow(unique(hmetis_rb[c("name", "k", "trueSeed")]))
nrow(unique(hmetis_k[c("name", "k", "trueSeed")]))
nrow(unique(patoh[c("name", "k", "trueSeed")]))
nrow(unique(edge[c("name", "k", "seed")]))
nrow(unique(vcycles[c("name", "k", "seed")]))
hmetis_k_instances = unique(hmetis_k[c("name", "k", "trueSeed")])
hmetis_rb_instances = unique(hmetis_rb[c("name", "k", "trueSeed")])
patoh_instances = unique(patoh[c("name", "k", "trueSeed")])
edge_instances = unique(edge[c("name", "k", "seed")])
vcycles_instances = unique(vcycles[c("name", "k", "seed")])
edge_instances <- plyr::rename(edge_instances, c("seed" = "trueSeed"))
vcycles_instances <- plyr::rename(vcycles_instances, c("seed" = "trueSeed"))
temp <- merge(hmetis_k_instances, hmetis_rb_instances)
nrow(temp)
temp <- merge(hmetis_k_instances, edge_instances)
nrow(temp)
temp <- merge(hmetis_k_instances, vcycles_instances)
nrow(temp)
temp <- merge(hmetis_k_instances, patoh_instances)
nrow(temp)
ef <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/vc_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc_ef <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/vc_and_ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
newip_30percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/30_clean.txt", header=TRUE, sep=" ")
data = automaticPlot(list("ef" = ef,
"vc" = vc,
"vc_ef" = vc_ef,
"runtimeEST" = newip_30percent
),
computeSequentialBaselineTime(ef))
ggplot(data2, aes(x=t, y=best, color=algorithm)) +
geom_line() +
scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
scale_y_continuous(breaks = pretty_breaks(n=5))
ggplot(data, aes(x=t, y=best, color=algorithm)) +
geom_line() +
scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
scale_y_continuous(breaks = pretty_breaks(n=5))
vc_ef <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/clean/vc_and_ef_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
nrow(unique(vc_ef[c("name", "k", "seed")]))
vc_ef_instances = unique(vc_ef[c("name", "k", "seed")])
vc_ef_instances <- plyr::rename(vc_ef_instances, c("seed" = "trueSeed"))
temp <- merge(hmetis_k_instances, vc_ef_instances)
nrow(temp)
data = automaticPlot(list("ef" = edge,
"vc" = vcycles,
"vc_ef" = vc_ef
),
computeSequentialBaselineTime(edge))
ggplot(data, aes(x=t, y=best, color=algorithm)) +
geom_line() +
scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
scale_y_continuous(breaks = pretty_breaks(n=5))
ef <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/vc_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
vc_ef <- read_delim("~/server-home/Hypergraphs/hmetis_and_patoh_results/tuning_results/clean/vc_and_ef_tuning_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
data = automaticPlot(list("ef" = ef,
"vc" = vc,
"vc_ef" = vc_ef
),
computeSequentialBaselineTime(ef))
ggplot(data, aes(x=t, y=best, color=algorithm)) +
geom_line() +
scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
scale_y_continuous(breaks = pretty_breaks(n=5))
per_10_rand <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_results/detailed_tuning/clean/ef_10_mutation_chance_0_edge_frequency_random_vcycles_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
per_10_rand <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/detailed_tuning/clean/ef_10_mutation_chance_0_edge_frequency_random_vcycles_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
per_10_nonrand <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/detailed_tuning/clean/ef_10_mutation_chance_0_edge_frequency_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
data = automaticPlot(list("ef" = ef,
"vc" = vc,
"vc_ef" = vc_ef,
"10 rand" = per_10_rand,
"10 nonrand" = per_10_nonrand
),
computeSequentialBaselineTime(ef))
ggplot(data, aes(x=t, y=best, color=algorithm)) +
geom_line() +
scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
scale_y_continuous(breaks = pretty_breaks(n=5))
newip_10percent = read.csv(file="/home/andre/server-home/Hypergraphs/unicluster_results_after_paper/newip_tuning/10_clean.txt", header=TRUE, sep=" ")
data = automaticPlot(list("old" = newip_10percent,
"10 rand" = per_10_rand,
"10 nonrand" = per_10_nonrand
),
computeSequentialBaselineTime(ef))
ggplot(data, aes(x=t, y=best, color=algorithm)) +
geom_line() +
scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
scale_y_continuous(breaks = pretty_breaks(n=5))
View(newip_10percent)
View(per_10_nonrand)
trad <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/detailed_tuning/clean/traditional_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
ef_only <- read_delim("~/server-home/Hypergraphs/gecco_unicluster_evo/detailed_tuning/clean/ef_only_clean.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
data = automaticPlot(list("ef" = ef,
"vc" = vc,
"vc_ef" = vc_ef,
"trad" = trad,
"10 rand" = per_10_rand,
"10 nonrand" = per_10_nonrand,
"ef_only" = ef_only
),
computeSequentialBaselineTime(ef))
ggplot(data, aes(x=t, y=best, color=algorithm)) +
geom_line() +
scale_x_continuous(trans = "log", breaks = c(1,2,5,10,20,50,100,200,500,1000,2000,5000)) +
scale_y_continuous(breaks = pretty_breaks(n=5))
